{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"run","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"QMMqmdiYMkvi"},"source":["## Faster GPUs\n","With Colab Pro you have priority access to our fastest GPUs. For example, you may get a T4 or P100 GPU at times when most users of standard Colab receive a slower K80 GPU. You can see what GPU you've been assigned at any time by executing the following cell."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"23TOba33L4qf","colab":{"base_uri":"https://localhost:8080/","height":364},"executionInfo":{"status":"ok","timestamp":1595493763468,"user_tz":-120,"elapsed":3570,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"outputId":"f948f420-8455-4e68-d19e-09a9680d25a6"},"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Select the Runtime → \"Change runtime type\" menu to enable a GPU accelerator, ')\n","  print('and then re-execute this cell.')\n","else:\n","  print(gpu_info)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Thu Jul 23 08:41:30 2020       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 450.51.05    Driver Version: 418.67       CUDA Version: 10.1     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   32C    P0    26W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                 ERR! |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"65MSuHKqNeBZ"},"source":["## More memory\n","With Colab Pro you have the option to access high-memory VMs when they are available. To set your notebook preference to use a high-memory runtime, select the Runtime → 'Change runtime type' menu, and then select High-RAM in the Runtime shape dropdown.\n","\n","You can see how much memory you have available at any time by running the following code."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"V1G82GuO-tez","colab":{}},"source":["from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('To enable a high-RAM runtime, select the Runtime → \"Change runtime type\"')\n","  print('menu, and then select High-RAM in the Runtime shape dropdown. Then, ')\n","  print('re-execute this cell.')\n","else:\n","  print('You are using a high-RAM runtime!')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s-R1p53qA5X6","colab_type":"text"},"source":["### Fix Error Transport point not connected\n","1. run the commands below\n","2. or Runtime->Manage session, terminate for the session."]},{"cell_type":"code","metadata":{"id":"o9NE7XN2BCOq","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","\n","!fusermount -u drive\n","!google-drive-ocamlfuse drive"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UJKHZKU4z8qn","colab_type":"text"},"source":["## Load Google Drive"]},{"cell_type":"code","metadata":{"id":"NZx9cUXNzyvK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"status":"ok","timestamp":1595885076225,"user_tz":-120,"elapsed":18896,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"outputId":"30cf04d2-263d-45be-ba31-16555ca0ed57"},"source":["from google.colab import drive\n","drive.mount('/gdrive')\n","\n","%cd /gdrive/My\\ Drive/TasNet/"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n","/gdrive/My Drive/TasNet\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"frIOUrnV97d8","colab_type":"text"},"source":["## Remount Google Drive\n","- needed when some changes happen on Drive and we want to see this changes here."]},{"cell_type":"code","metadata":{"id":"zP-TMK3R-CN_","colab_type":"code","colab":{}},"source":["from importlib import reload  # Python 3.4+ only.\n","drive = reload(drive)         #update google drive disk data here\n","\n","drive.mount('/gdrive', force_remount=True)\n","\n","%cd /gdrive/My\\ Drive/TasNet/"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sU91zxFrz-1j","colab_type":"text"},"source":["## Train network\n"]},{"cell_type":"code","metadata":{"id":"amKl8EdRz_KW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"dded5971-2eb7-486a-859f-1e2004e40860"},"source":["!python3 train.py --epochs 60 --X 8 --R 3 --lr=0.001  --segment-length=32000  \\\n","--basepath=\"/gdrive/My Drive/FIT/dataset/\"         \\\n","--dst-dir=\"/gdrive/My Drive/FIT/training_results/\"   \\\n","--minibatch-size 50  | tee output.log     # 100 je moc, dosla pamet. "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Version 20\n","Namespace(BASE_DATA_PATH='/gdrive/My Drive/FIT/dataset/', DEBUG=False, R=3, X=8, checkpoint_file=None, disable_training=False, disable_validation=False, dst_dir='/gdrive/My Drive/FIT/training_results/', epochs=60, learning_rate=0.001, minibatch_size=50, padding=10, print_loss=False, segment_length=32000, stride=20)\n","Cuda is available!\n","Trainign directory:  /gdrive/My Drive/FIT/training_results/2020-07-25_02:18_X8_R3/\n","Epoch  1 / 60  started at  2020-07-25 02:22:26.093666\n","Epoch  1 / 60  finished - processed in  11:46:46.249310 \n","\n","Validace\n","new:  -11.036491712488623  old:  50\n","Validation Finished in  2:49:56.270380\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  2 / 60  started at  2020-07-25 16:59:08.834851\n","Epoch  2 / 60  finished - processed in  0:15:41.599228 \n","\n","Validace\n","new:  -14.439812225288593  old:  -11.036491712488623\n","Validation Finished in  0:01:46.934465\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  3 / 60  started at  2020-07-25 17:16:37.587159\n","Epoch  3 / 60  finished - processed in  0:15:42.060866 \n","\n","Validace\n","new:  -16.297306590099332  old:  -14.439812225288593\n","Validation Finished in  0:01:49.703797\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  4 / 60  started at  2020-07-25 17:34:09.559704\n","Epoch  4 / 60  finished - processed in  0:15:30.055900 \n","\n","Validace\n","new:  -17.494690924127973  old:  -16.297306590099332\n","Validation Finished in  0:01:47.058672\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  5 / 60  started at  2020-07-25 17:51:26.954552\n","Epoch  5 / 60  finished - processed in  0:15:25.309670 \n","\n","Validace\n","new:  -18.180366197667627  old:  -17.494690924127973\n","Validation Finished in  0:01:47.735173\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  6 / 60  started at  2020-07-25 18:08:40.253286\n","Epoch  6 / 60  finished - processed in  0:15:32.946321 \n","\n","Validace\n","new:  -18.790958896293088  old:  -18.180366197667627\n","Validation Finished in  0:01:46.601806\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  7 / 60  started at  2020-07-25 18:26:00.029482\n","Epoch  7 / 60  finished - processed in  0:15:36.615065 \n","\n","Validace\n","new:  -19.010907835574557  old:  -18.790958896293088\n","Validation Finished in  0:01:50.418265\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  8 / 60  started at  2020-07-25 18:43:27.299329\n","Epoch  8 / 60  finished - processed in  0:15:36.726252 \n","\n","Validace\n","new:  -19.480173226173516  old:  -19.010907835574557\n","Validation Finished in  0:01:47.271578\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  9 / 60  started at  2020-07-25 19:00:51.526164\n","Epoch  9 / 60  finished - processed in  0:15:44.493414 \n","\n","Validace\n","new:  -19.735803977536758  old:  -19.480173226173516\n","Validation Finished in  0:01:50.158191\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  10 / 60  started at  2020-07-25 19:18:26.411326\n","Epoch  10 / 60  finished - processed in  0:15:36.009287 \n","\n","Validace\n","new:  -19.889708827940723  old:  -19.735803977536758\n","Validation Finished in  0:01:48.554515\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  11 / 60  started at  2020-07-25 19:35:51.208923\n","Epoch  11 / 60  finished - processed in  0:15:36.541936 \n","\n","Validace\n","new:  -20.23226433281482  old:  -19.889708827940723\n","Validation Finished in  0:01:49.658254\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  12 / 60  started at  2020-07-25 19:53:17.621186\n","Epoch  12 / 60  finished - processed in  0:15:39.200962 \n","\n","Validace\n","new:  -20.45295552118853  old:  -20.23226433281482\n","Validation Finished in  0:01:48.132390\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  13 / 60  started at  2020-07-25 20:10:45.195921\n","Epoch  13 / 60  finished - processed in  0:15:37.990528 \n","\n","Validace\n","new:  -20.530669762286  old:  -20.45295552118853\n","Validation Finished in  0:01:49.685737\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  14 / 60  started at  2020-07-25 20:28:13.109599\n","Epoch  14 / 60  finished - processed in  0:15:53.363824 \n","\n","Validace\n","new:  -20.774495978928044  old:  -20.530669762286\n","Validation Finished in  0:01:48.651101\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  15 / 60  started at  2020-07-25 20:45:55.356352\n","Epoch  15 / 60  finished - processed in  0:15:55.419379 \n","\n","Validace\n","new:  -20.939511981894086  old:  -20.774495978928044\n","Validation Finished in  0:01:53.445896\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  16 / 60  started at  2020-07-25 21:03:44.488827\n","Epoch  16 / 60  finished - processed in  0:16:01.615773 \n","\n","Validace\n","new:  -20.87508876418324  old:  -20.939511981894086\n","Validation Finished in  0:01:48.921257\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  17 / 60  started at  2020-07-25 21:21:35.286373\n","Epoch  17 / 60  finished - processed in  0:16:05.206357 \n","\n","Validace\n","new:  -21.09954337616014  old:  -20.939511981894086\n","Validation Finished in  0:01:53.540101\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  18 / 60  started at  2020-07-25 21:39:34.316943\n","Epoch  18 / 60  finished - processed in  0:16:08.237870 \n","\n","Validace\n","new:  -21.157474828052493  old:  -21.09954337616014\n","Validation Finished in  0:01:49.568881\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  19 / 60  started at  2020-07-25 21:57:32.357119\n","Epoch  19 / 60  finished - processed in  0:16:08.399725 \n","\n","Validace\n","new:  -21.28118696810343  old:  -21.157474828052493\n","Validation Finished in  0:01:52.504210\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  20 / 60  started at  2020-07-25 22:15:33.521625\n","Epoch  20 / 60  finished - processed in  0:16:05.615551 \n","\n","Validace\n","new:  -21.335974737016155  old:  -21.28118696810343\n","Validation Finished in  0:01:49.191069\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  21 / 60  started at  2020-07-25 22:33:28.576181\n","Epoch  21 / 60  finished - processed in  0:16:31.554171 \n","\n","Validace\n","new:  -21.52234746756743  old:  -21.335974737016155\n","Validation Finished in  0:01:54.747090\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  22 / 60  started at  2020-07-25 22:51:55.147404\n","Epoch  22 / 60  finished - processed in  0:16:32.709415 \n","\n","Validace\n","new:  -21.033046565536548  old:  -21.52234746756743\n","Validation Finished in  0:01:51.246016\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  23 / 60  started at  2020-07-25 23:10:19.327263\n","Epoch  23 / 60  finished - processed in  0:16:23.356417 \n","\n","Validace\n","new:  -21.45301119206123  old:  -21.52234746756743\n","Validation Finished in  0:01:54.537309\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  24 / 60  started at  2020-07-25 23:28:37.446603\n","Epoch  24 / 60  finished - processed in  0:16:22.422421 \n","\n","Validace\n","new:  -21.533450276383913  old:  -21.52234746756743\n","Validation Finished in  0:01:50.532153\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  25 / 60  started at  2020-07-25 23:46:50.661085\n","Epoch  25 / 60  finished - processed in  0:16:27.571258 \n","\n","Validace\n","new:  -21.591976944672343  old:  -21.533450276383913\n","Validation Finished in  0:01:54.212865\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  26 / 60  started at  2020-07-26 00:05:12.678452\n","Epoch  26 / 60  finished - processed in  0:16:30.313242 \n","\n","Validace\n","new:  -21.742488744894352  old:  -21.591976944672343\n","Validation Finished in  0:01:50.968423\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  27 / 60  started at  2020-07-26 00:23:34.193477\n","Epoch  27 / 60  finished - processed in  0:16:29.482559 \n","\n","Validace\n","new:  -21.760725011777637  old:  -21.742488744894352\n","Validation Finished in  0:01:53.856137\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  28 / 60  started at  2020-07-26 00:41:57.776558\n","Epoch  28 / 60  finished - processed in  0:16:24.296569 \n","\n","Validace\n","new:  -21.839585507005292  old:  -21.760725011777637\n","Validation Finished in  0:01:49.932612\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  29 / 60  started at  2020-07-26 01:00:12.247521\n","Epoch  29 / 60  finished - processed in  0:16:28.368521 \n","\n","Validace\n","new:  -21.8868326706075  old:  -21.839585507005292\n","Validation Finished in  0:01:54.855722\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  30 / 60  started at  2020-07-26 01:18:35.719998\n","Epoch  30 / 60  finished - processed in  0:16:30.848829 \n","\n","Validace\n","new:  -21.96148614665323  old:  -21.8868326706075\n","Validation Finished in  0:01:52.093197\n","\n","Checkpoint has been created after epoch.\n","\n","Epoch  31 / 60  started at  2020-07-26 01:36:58.912445\n","Epoch  31 / 60  finished - processed in  0:16:32.799971 \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"BppHlWLAk2Rz"},"source":["## DEBUG Train network\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ZfuaJ3o2lB0_","colab":{}},"source":["!python3 train.py  \\\n","--epochs 5 --X 1 --R 1  \\\n","--basepath=\"/gdrive/My Drive/FIT/dataset/\"         \\\n","--dst-dir=\"/gdrive/My Drive/FIT/DEBUG_training/\"   \\\n","--disable-validation  \\\n","--disable-training    \\\n","--minibatch-size 10  #2>stderr.log"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YMfe3N2QiRM6","colab_type":"text"},"source":["## *Checkpoint* operations"]},{"cell_type":"code","metadata":{"id":"17FwaykTi788","colab_type":"code","colab":{}},"source":["# Set directory which will be used for \n","#   - inference\n","#   - test and computing metrics\n","#   - plot loss graph\n","x = 8\n","r = 4\n","working_dir = \"\"\n","checkpoint = \"\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"jr7eWvYEC4gl"},"source":["### Train network - Continue\n","- load checkpoint and continue with training\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"QTaU9MCKC66U","colab":{}},"source":["# Specify Directory and Checkpoint which will be loaded for training \n","training_dir = \"2020-03-21_23:50_X8_R4\"\n","checkpoint   = \"tasnet_model_checkpoint_2020-03-22_X8_R4_e48.tar\"\n","\n","\n","!python3 train.py --epochs 22 --X 8 --R 4 --lr=0.001  \\\n","--load-checkpoint=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/\"$checkpoint   \\\n","--basepath=\"/gdrive/My Drive/FIT/dataset/\"        \\\n","--dst-dir=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/\"   \\\n","--minibatch-size 70    #2>stderr.log\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ESHqmtc5f3Rs","colab_type":"text"},"source":["### Inference\n","- extract Sources from Mixture\n"]},{"cell_type":"code","metadata":{"id":"5wwOaZ09f7Ot","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":176},"executionInfo":{"status":"ok","timestamp":1588726485679,"user_tz":-120,"elapsed":22857,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"outputId":"235acf63-1b1b-4f44-f520-970c908554fd"},"source":["# Specify Directory and Checkpoint which will be loaded for inference and \n","# to where separations will be saved.\n","training_dir = \"2020-05-05_01:59_X6_R3\"\n","checkpoint   = \"tasnet_model_checkpoint_2020-05-06_X6_R3_e60.tar\"\n","\n","\n","!python3 inference.py --R 3 --X 6   \\\n","--load-checkpoint=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/\"$checkpoint \\\n","--dst-dir=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/inference/\" \\\n","--basepath=\"/gdrive/My Drive/FIT/test_mixtures/\"   \\\n","--input-mixture=\"mix1.wav\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Version 07\n","Namespace(BASE_DATA_PATH='/gdrive/My Drive/FIT/test_mixtures/', DEBUG=False, R=3, X=6, checkpoint_file='/gdrive/My Drive/FIT/training_results/2020-05-05_01:59_X6_R3/tasnet_model_checkpoint_2020-05-06_X6_R3_e60.tar', dst_dir='/gdrive/My Drive/FIT/training_results/2020-05-05_01:59_X6_R3/inference/', epochs=None, input_mixture='mix1.wav', learning_rate=0.0001, minibatch_size=1, padding=10, stride=20)\n","Cuda is available!\n","Nactena epocha:  60  a loss:  tensor(-960.9195, device='cuda:0')\n","Prepared for inference, load your audio.\n","/gdrive/My Drive/TasNet/tools.py:101: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  tensor_float32 = torch.tensor(tensor, dtype=torch.float32)\n","Inference done, separated speakers saved into /gdrive/My Drive/FIT/training_results/2020-05-05_01:59_X6_R3/inference/\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mFEGedlzgTnm","colab_type":"text"},"source":["### Test network\n","- calculate SI-SNR and metrics"]},{"cell_type":"code","metadata":{"id":"q9vj3GbZIc-j","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1595370186462,"user_tz":-120,"elapsed":18650,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"outputId":"2486b4ef-dc27-4a02-b4f2-b9d9818c52f6"},"source":["!pip3 install pystoi\n","!pip3 install https://github.com/ludlows/python-pesq/archive/master.zip"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting pystoi\n","  Downloading https://files.pythonhosted.org/packages/4c/d8/58a5deefb57e3ca78d6421d2ec536880a29ac0e497b2d1baded6f2153beb/pystoi-0.3.3.tar.gz\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from pystoi) (1.18.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from pystoi) (1.4.1)\n","Building wheels for collected packages: pystoi\n","  Building wheel for pystoi (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pystoi: filename=pystoi-0.3.3-py2.py3-none-any.whl size=7782 sha256=82a6e8df4de1c7c40ca9edf5e3874e5da29b407e93f3219db3ec30897a9936f4\n","  Stored in directory: /root/.cache/pip/wheels/6b/6c/b2/d49af4b7ee4ce275cf2511484b043e09b9cb7ae90c1accb17a\n","Successfully built pystoi\n","Installing collected packages: pystoi\n","Successfully installed pystoi-0.3.3\n","Collecting https://github.com/ludlows/python-pesq/archive/master.zip\n","\u001b[?25l  Downloading https://github.com/ludlows/python-pesq/archive/master.zip\n","\u001b[K     \\ 389kB 403kB/s\n","\u001b[?25hBuilding wheels for collected packages: pesq\n","  Building wheel for pesq (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pesq: filename=pesq-0.0.1-cp36-cp36m-linux_x86_64.whl size=162026 sha256=20396e9b59f51a62315c4c3d65ee76cc8d0b29b6b3e5dd35f4cd3cffe858a83f\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-mlo02tel/wheels/85/91/09/5ae7677a054a05d49111dc8f3b282e886b3852348384893a32\n","Successfully built pesq\n","Installing collected packages: pesq\n","Successfully installed pesq-0.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"54BPXSpLgZQg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1595378687228,"user_tz":-120,"elapsed":8469044,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"outputId":"cd6efa8e-b2b5-4ba6-b267-1e9dd2a3d130"},"source":["# Specify Directory and Checkpoint which will be tested.\n","R = \"2\"\n","X = \"6\"\n","\n","training_dir = \"2020-07-20_17:56_X\" + X + \"_R\" + R + \"\"\n","checkpoint   = \"tasnet_model_checkpoint_2020-07-21_X\"+X+\"_R\"+R+\"_e60.tar\"\n","\n","\n","!python3 test.py --R $R --X $X                                                 \\\n","--basepath=\"/gdrive/My Drive/FIT/dataset/\"                                   \\\n","--load-checkpoint=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/\"$checkpoint \\\n","--dst-dir=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/\"               \\\n","--minibatch-size 1\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Version 14\n","Namespace(BASE_DATA_PATH='/gdrive/My Drive/FIT/dataset/', DEBUG=False, R=2, X=6, checkpoint_file='/gdrive/My Drive/FIT/training_results/2020-07-20_17:56_X6_R2/tasnet_model_checkpoint_2020-07-21_X6_R2_e60.tar', dst_dir='/gdrive/My Drive/FIT/training_results/2020-07-20_17:56_X6_R2/', learning_rate=0.0001, minibatch_size=1, padding=10, stride=20)\n","Cuda is available!\n","\n","2020-07-21 22:47:09 60 499\n","\n","2020-07-21 23:10:17 60 999\n","\n","2020-07-21 23:33:33 60 1499\n","\n","2020-07-21 23:57:06 60 1999\n","\n","2020-07-22 00:20:35 60 2499\n","/usr/local/lib/python3.6/dist-packages/pystoi/stoi.py:69: RuntimeWarning: Not enough STFT frames to compute intermediate intelligibility measure after removing silent frames. Returning 1e-5. Please check you wav files\n","  RuntimeWarning)\n","\n","2020-07-22 00:43:33 60 2999\n","Final SDR:  10.805243851898458\n","Final SIR:  19.20613984099217\n","Final SAR:  12.376996683573271\n","Final STOI: 0.9213352974725696\n","Final PESQ: 2.5211191951831182\n","Finished Testing\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yh0XKV8_KUD_","colab_type":"text"},"source":["### Plot loss graph "]},{"cell_type":"code","metadata":{"colab_type":"code","id":"p0u0AXqPS670","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1595790565215,"user_tz":-120,"elapsed":1536,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"outputId":"d3fc962b-937f-40b0-fba8-449d56a0399c"},"source":["import matplotlib.pyplot as plt\n","import csv\n","\n","batch_size = 50\n","num_of_speakers = 2\n","num_of_records_in_epoch = 15\n","\n","######## na zkouzku ###############################\n","def plotLoss(directories, step=1):\n","  \"\"\"\n","  directories ... array of strings\n","  step        ... definuje velikost kroku, jak zpracovávat záznamy loss\n","  \"\"\"\n","  for dir in directories:\n","    x = []\n","    y = []\n","    idx = 0\n","    losspath = \"/gdrive/My Drive/FIT/training_results/\" + dir + \"/training_loss.log\"\n","    with open(losspath,'r') as csvfile:\n","      plots = csv.reader(csvfile, delimiter=',')\n","      for row in plots:\n","        # draw only every third logged loss value\n","        if idx % step == 0:\n","          x.append(float(row[0]))\n","          #x.append(idx)\n","          y.append((float(row[1]) / batch_size) / num_of_speakers) #Loss would be around -1500, and I want it to be around 12.\n","        idx += 1\n","    plt.plot(x,y, label='Graf trénování modelu '+dir)\n","\n","  plt.xlabel('Počet zpracovaných segmentů')\n","  plt.ylabel('Loss')\n","  plt.title('Graf hodnoty loss v průběhu trénování')\n","  plt.legend()\n","  plt.show()\n","##################################################\n","\n","#old\n","#directories = [\"2020-03-16_02:17_X4_R2\", \"2020-03-15_15:40_X7_R3\", \"2020-03-16_14:43_X7_R3\", \"2020-03-17_01:27_X7_R3\"]\n","\n","#new\n","directories = [\"2020-06-28_02:07_X8_R4\", \"2020-06-29_01:59_X8_R4\"] #X8 R4 s rozdilnou seg_len\n","#directories = [\"2020-06-28_02:07_X8_R4\", \"2020-07-25_02:18_X8_R3\", \"2020-06-22_00:18_X8_R2\"]\n","#directories = [\"2020-06-28_02:07_X8_R4\", \"2020-06-17_12:11_X6_R4\", \"2020-05-06_01:55_X4_R4\"]\n","\n","\n","plotLoss(directories, step=15)\n"],"execution_count":76,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"DUSWy8JaZ5Ao"},"source":["### Plot validation graph "]},{"cell_type":"code","metadata":{"id":"UwWKtLabKWe8","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","import csv\n","\n","batch_size = 50\n","num_of_speakers = 2\n","num_of_records_in_epoch = 15\n","\n","######## Vykresleni validacni loss hodnoty ###############################\n","def plotLoss(directories, step=1):\n","  \"\"\"\n","  directories ... array of strings\n","  step        ... definuje velikost kroku, jak zpracovávat záznamy loss\n","  \"\"\"\n","  for dir in directories:\n","    x = []\n","    y = []\n","    idx = 0\n","    i = 0\n","    losspath = \"/gdrive/My Drive/FIT/training_results/\" + dir + \"/training_loss.log\"\n","    with open(losspath,'r') as csvfile:\n","      plots = csv.reader(csvfile, delimiter=',')\n","      for row in plots:\n","        # draw only every third logged loss value\n","        if idx % 7 == 0:\n","          #x.append(float(row[0]))\n","          x.append(i)\n","          y.append((float(row[1]) / batch_size) / num_of_speakers) #Loss would be around -1500, and I want it to be around 12.\n","          i += 1\n","\n","        idx += 1\n","    plt.plot(x,y, label='Trénovací loss')\n","    \n","    x = []\n","    y = []\n","    idx = 0\n","    losspath = \"/gdrive/My Drive/FIT/training_results/\" + dir + \"/validation_loss.log\"\n","    with open(losspath,'r') as csvfile:\n","      plots = csv.reader(csvfile, delimiter=',')\n","      for row in plots:\n","        # draw only every third logged loss value\n","        if idx % 1 == 0:\n","          x.append(float(row[0]))\n","          #x.append(idx)\n","          y.append((float(row[1]) / num_of_speakers))\n","        idx += 1\n","    plt.plot(x,y, label='Validační loss')\n","\n","  plt.xlabel('Epocha')\n","  plt.ylabel('Loss')\n","  #plt.title('Graf trénovací a validační loss modelu '+dir)\n","  plt.legend()\n","  plt.show()\n","##################################################\n","\n","#old\n","#directories = [\"2020-03-16_02:17_X4_R2\", \"2020-03-15_15:40_X7_R3\", \"2020-03-16_14:43_X7_R3\", \"2020-03-17_01:27_X7_R3\"]\n","\n","#new\n","#directories = [\"2020-06-28_02:07_X8_R4\", \"2020-06-29_01:59_X8_R4\"] #X8 R4 s rozdilnou seg_len\n","\n","directories = [\"2020-06-28_02:07_X8_R4\"]\n","#directories = [\"2020-05-06_01:55_X4_R4\"]\n","\n","plotLoss(directories, step=1)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"HthhM2ctMK9q"},"source":["### Plot loss graph with simpler description and without title"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Nqp6XbEEMK9z","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1595886991684,"user_tz":-120,"elapsed":680,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"outputId":"442e0340-1a94-48bb-8fa1-7bffe74ee55f"},"source":["import matplotlib.pyplot as plt\n","import csv\n","\n","batch_size = 50\n","num_of_speakers = 2\n","num_of_records_in_epoch = 15\n","\n","######## na zkouzku ###############################\n","def plotLoss(directories, ylabels, step=1):\n","  \"\"\"\n","  directories ... array of strings\n","  step        ... definuje velikost kroku, jak zpracovávat záznamy loss\n","  \"\"\"\n","  ylabelindex = 0\n","  for dir in directories:\n","    x = []\n","    y = []\n","    idx = 0\n","    losspath = \"/gdrive/My Drive/FIT/training_results/\" + dir + \"/training_loss.log\"\n","    with open(losspath,'r') as csvfile:\n","      plots = csv.reader(csvfile, delimiter=',')\n","      for row in plots:\n","        # draw only every third logged loss value\n","        if idx % step == 0:\n","          x.append(float(row[0]))\n","          #x.append(idx)\n","          y.append((float(row[1]) / batch_size) / num_of_speakers) #Loss would be around -1500, and I want it to be around 12.\n","        idx += 1\n","    plt.plot(x,y, label='Model '+ylabels[ylabelindex])\n","    #plt.plot(x,y, label=''+ylabels[ylabelindex])\n","    ylabelindex += 1\n","\n","  plt.xlabel('Počet zpracovaných segmentů')\n","  plt.ylabel('Loss')\n","  #plt.title('Graf hodnoty loss v průběhu trénování')\n","  plt.legend()\n","  plt.show()\n","##################################################\n","\n","#old\n","#directories = [\"2020-03-16_02:17_X4_R2\", \"2020-03-15_15:40_X7_R3\", \"2020-03-16_14:43_X7_R3\", \"2020-03-17_01:27_X7_R3\"]\n","\n","\n","#----------------------new------------------------\n","#directories = [\"2020-06-28_02:07_X8_R4\", \"2020-06-29_01:59_X8_R4\"] #X8 R4 s rozdilnou seg_len\n","#ylabels     = [\"X8_R4_segment-len-32k\", \"X8_R4_segment-len-16k\"]\n","\n","directories = [\"2020-06-28_02:07_X8_R4\", \"2020-06-17_12:11_X6_R4\", \"2020-05-06_01:55_X4_R4\"]\n","ylabels     = [\"X8_R4\", \"X6_R4\", \"X4_R4\"]\n","\n","plotLoss(directories, ylabels, step=15)\n"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}