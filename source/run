{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"run","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"QMMqmdiYMkvi"},"source":["## Faster GPUs\n","With Colab Pro you have priority access to our fastest GPUs. For example, you may get a T4 or P100 GPU at times when most users of standard Colab receive a slower K80 GPU. You can see what GPU you've been assigned at any time by executing the following cell."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"23TOba33L4qf","outputId":"59ae1e72-4759-4bbc-90c1-70b23ad9d9c7","executionInfo":{"status":"ok","timestamp":1584062437602,"user_tz":-60,"elapsed":46782,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"colab":{"base_uri":"https://localhost:8080/","height":312}},"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Select the Runtime → \"Change runtime type\" menu to enable a GPU accelerator, ')\n","  print('and then re-execute this cell.')\n","else:\n","  print(gpu_info)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fri Mar 13 01:19:30 2020       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 440.59       Driver Version: 418.67       CUDA Version: 10.1     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   42C    P0    34W / 250W |      0MiB / 16280MiB |      0%      Default |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                       GPU Memory |\n","|  GPU       PID   Type   Process name                             Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"65MSuHKqNeBZ"},"source":["## More memory\n","With Colab Pro you have the option to access high-memory VMs when they are available. To set your notebook preference to use a high-memory runtime, select the Runtime → 'Change runtime type' menu, and then select High-RAM in the Runtime shape dropdown.\n","\n","You can see how much memory you have available at any time by running the following code."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"V1G82GuO-tez","outputId":"248773d7-56a8-43b9-ee8e-379010e914b3","executionInfo":{"status":"ok","timestamp":1583661749373,"user_tz":-60,"elapsed":825,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"colab":{"base_uri":"https://localhost:8080/","height":104}},"source":["from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('To enable a high-RAM runtime, select the Runtime → \"Change runtime type\"')\n","  print('menu, and then select High-RAM in the Runtime shape dropdown. Then, ')\n","  print('re-execute this cell.')\n","else:\n","  print('You are using a high-RAM runtime!')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Your runtime has 13.7 gigabytes of available RAM\n","\n","To enable a high-RAM runtime, select the Runtime → \"Change runtime type\"\n","menu, and then select High-RAM in the Runtime shape dropdown. Then, \n","re-execute this cell.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s-R1p53qA5X6","colab_type":"text"},"source":["### Fix Error Transport point not connected\n","1. run the commands below\n","2. or Runtime->Manage session, terminate for the session."]},{"cell_type":"code","metadata":{"id":"o9NE7XN2BCOq","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","\n","!fusermount -u drive\n","!google-drive-ocamlfuse drive"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UJKHZKU4z8qn","colab_type":"text"},"source":["## Load Google Drive"]},{"cell_type":"code","metadata":{"id":"NZx9cUXNzyvK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":141},"outputId":"0e08377d-53f0-4b19-ec89-a14c0f2911c9","executionInfo":{"status":"ok","timestamp":1584236981223,"user_tz":-60,"elapsed":24800,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}}},"source":["from google.colab import drive\n","drive.mount('/gdrive')\n","\n","%cd /gdrive/My\\ Drive/TasNet/"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n","/gdrive/My Drive/TasNet\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"frIOUrnV97d8","colab_type":"text"},"source":["## Remount Google Drive\n","- needed when some changes happen on Drive and we want to see this changes here."]},{"cell_type":"code","metadata":{"id":"zP-TMK3R-CN_","colab_type":"code","colab":{}},"source":["from importlib import reload  # Python 3.4+ only.\n","drive = reload(drive)         #update google drive disk data here\n","\n","drive.mount('/gdrive', force_remount=True)\n","\n","%cd /gdrive/My\\ Drive/TasNet/"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sU91zxFrz-1j","colab_type":"text"},"source":["## Train network\n"]},{"cell_type":"code","metadata":{"id":"amKl8EdRz_KW","colab_type":"code","outputId":"ae1d8271-9aee-40fb-a48b-23dbab222745","executionInfo":{"status":"ok","timestamp":1584176330510,"user_tz":-60,"elapsed":19603251,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["!python3 train.py --epochs 10 --X 8 --R 4   \\\n","--basepath=\"/gdrive/My Drive/FIT/dataset/\"         \\\n","--dst-dir=\"/gdrive/My Drive/FIT/training_results/\"   \\\n","--minibatch-size 50    #2>stderr.log"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Version 13\n","Namespace(BASE_DATA_PATH='/gdrive/My Drive/FIT/dataset/', DEBUG=False, R=3, X=7, checkpoint_file=None, disable_training=False, disable_validation=False, dst_dir='/gdrive/My Drive/FIT/training_results/', epochs=10, learning_rate=0.0001, minibatch_size=30, padding=10, print_loss=False, stride=20)\n","Cuda is available!\n","Trainign directory:  /gdrive/My Drive/FIT/training_results/2020-03-14_03:31_X7_R3/\n","Epoch  0  started at  2020-03-14 03:32:36.245077\n",">> __len__\n","__len__: 1 < 20000  Returns:  54936\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  0  finished - processed in  0:14:19.064895 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  44660\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  2:45:11.125283\n","\n","-7.609242183907119   42\n","Epoch  1  started at  2020-03-14 06:32:06.611977\n",">> __len__\n","__len__: 1 < 20000  Returns:  44486\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  1  finished - processed in  0:14:31.929418 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  38836\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:36.950223\n","\n","-10.008364783349544   -7.609242183907119\n","Epoch  2  started at  2020-03-14 06:48:15.662200\n",">> __len__\n","__len__: 1 < 20000  Returns:  41915\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  2  finished - processed in  0:14:34.300784 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  17120\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:39.251209\n","\n","-11.667702653055716   -10.008364783349544\n","Epoch  3  started at  2020-03-14 07:04:29.365989\n",">> __len__\n","__len__: 1 < 20000  Returns:  41239\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  3  finished - processed in  0:14:39.793921 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  40176\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:39.886273\n","\n","-12.704352995295755   -11.667702653055716\n","Epoch  4  started at  2020-03-14 07:20:49.229586\n",">> __len__\n","__len__: 1 < 20000  Returns:  46926\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  4  finished - processed in  0:14:34.248504 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  38550\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:38.037895\n","\n","-13.539396303028415   -12.704352995295755\n","Epoch  5  started at  2020-03-14 07:37:01.666301\n",">> __len__\n","__len__: 1 < 20000  Returns:  41804\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  5  finished - processed in  0:14:34.639810 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  54375\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:40.881878\n","\n","-14.39575403123718   -13.539396303028415\n","Epoch  6  started at  2020-03-14 07:53:17.365367\n",">> __len__\n","__len__: 1 < 20000  Returns:  40640\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  6  finished - processed in  0:14:26.867194 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  42080\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:37.763927\n","\n","-15.031834458096945   -14.39575403123718\n","Epoch  7  started at  2020-03-14 08:09:22.178373\n",">> __len__\n","__len__: 1 < 20000  Returns:  39200\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  7  finished - processed in  0:14:28.229580 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  35840\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:39.088175\n","\n","-15.40747970097518   -15.031834458096945\n","Epoch  8  started at  2020-03-14 08:25:29.684958\n",">> __len__\n","__len__: 1 < 20000  Returns:  54872\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  8  finished - processed in  0:14:27.408392 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  37812\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:38.314978\n","\n","-15.799902815706803   -15.40747970097518\n","Epoch  9  started at  2020-03-14 08:41:35.577866\n",">> __len__\n","__len__: 1 < 20000  Returns:  47424\n","Checkpoint has been created.\n","Checkpoint has been created.\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  20000 / 20000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n",">>Epoch ends. Post epoch operations:\n","Checkpoint has been created after epoch.\n","batch_cnt:  1293  segment-cnt:  38790\n","Epoch  9  finished - processed in  0:14:26.199730 \n","\n","\n","Validace\n",">> __len__\n","__len__: 1 < 5000  Returns:  38240\n","    loadNextAudio: POZOR: audioindex >= len(self.mixtures)  5000 / 5000 , iterace by mela skoncit a nachystat se nove epocha. (Return None that will rise StopIteration exception.)\n","    __getitem__(): cant return segments: StopIteration raised\n","Validation Finished in  0:01:39.712220\n","\n","-16.044594412717487   -15.799902815706803\n","Finished Training\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"BppHlWLAk2Rz"},"source":["## DEBUG Train network\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ZfuaJ3o2lB0_","colab":{}},"source":["!python3 train.py  \\\n","--epochs 5 --X 1 --R 1  \\\n","--basepath=\"/gdrive/My Drive/FIT/dataset/\"         \\\n","--dst-dir=\"/gdrive/My Drive/FIT/DEBUG_training/\"   \\\n","--disable-validation  \\\n","--disable-training    \\\n","--minibatch-size 10  #2>stderr.log"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ESHqmtc5f3Rs","colab_type":"text"},"source":["## Inference - extract Sources from Mixture\n"]},{"cell_type":"code","metadata":{"id":"5wwOaZ09f7Ot","colab_type":"code","colab":{}},"source":["# Specify Directory and Checkpoint which will be loaded for inference and \n","# to where separations will be saved.\n","training_dir = \"2020-03-03_23:49_X7_R3\"\n","checkpoint   = \"tasnet_model_checkpoint_2020-03-04_00:53_X7_R3_e0_a15000.tar\"\n","\n","\n","!python3 inference.py --R 3 --X 7   \\\n","--load-checkpoint=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/\"$checkpoint \\\n","--dst-dir=\"/gdrive/My Drive/FIT/training_results/\"$training_dir\"/inference/\" \\\n","--basepath=\"/gdrive/My Drive/FIT/test_mixtures/\"   \\\n","--input-mixture=\"mix2.wav\""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mFEGedlzgTnm","colab_type":"text"},"source":["## Test network - calculate SI-SNR"]},{"cell_type":"code","metadata":{"id":"54BPXSpLgZQg","colab_type":"code","colab":{}},"source":["# Specify Directory and Checkpoint which will be tested.\n","test_dir   = \"2020-03-14_03:31_X7_R3\"\n","checkpoint = \"tasnet_model_checkpoint_2020-03-14_X7_R3_e1_a38790.tar\"\n","\n","\n","!python3 test.py --R 3 --X 7                                                 \\\n","--basepath=\"/gdrive/My Drive/FIT/dataset/\"                                   \\\n","--load-checkpoint=\"/gdrive/My Drive/FIT/training_results/\"$test_dir\"/\"$checkpoint \\\n","--dst-dir=\"/gdrive/My Drive/FIT/training_results/\"$test_dir\"/\"               \\\n","--minibatch-size 1\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yh0XKV8_KUD_","colab_type":"text"},"source":["# Plot loss graph "]},{"cell_type":"code","metadata":{"id":"UwWKtLabKWe8","colab_type":"code","outputId":"650b0f7b-d656-4d77-9af0-84cc0058fe9c","executionInfo":{"status":"ok","timestamp":1584237827628,"user_tz":-60,"elapsed":632,"user":{"displayName":"Kyuubi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg8iA1SO5WVlbY-r-p7wqCuleXLVpOuYym6tOQ3=s64","userId":"09699004457365288649"}},"colab":{"base_uri":"https://localhost:8080/","height":310}},"source":["import matplotlib.pyplot as plt\n","import csv\n","\n","\n","# Directory from which program takes log file.\n","dir = \"2020-03-14_03:31_X7_R3\"\n","\n","\n","x = []\n","y = []\n","losspath = \"/gdrive/My Drive/FIT/training_results/\" + dir + \"/training_loss.log\"\n","with open(losspath,'r') as csvfile:\n","    plots = csv.reader(csvfile, delimiter=',')\n","    for row in plots:\n","        x.append(float(row[0]))\n","        y.append(float(row[1]))\n","\n","plt.plot(x,y, label='Training loss')\n","plt.xlabel('number of processed segments')\n","plt.ylabel('loss')\n","plt.title('Interesting Graph\\nCheck it out')\n","plt.legend()\n","plt.show()"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"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\ncuwo8vPPKUuYsya/6srGGGOqxRJOOfb4S3nq86X8tHpruEMxxoTAli1b6N+/P/3796dNmza0b99+\n78/FxcVV7wC45ppryMrKqrTOs88+y5gxY4IRMscddxxz5swJyr7CJawjDdRXcdE+AAqLS8IciTEm\nFFq2bLn3y/u+++4jMTGR22+/fb86qoqqEhFR/t/lr732WpXHGTVq1KEH24hYC6ccMZERiMAuSzjG\nNCnZ2dlkZGRw2WWX0bt3b9avX8/IkSPJzMykd+/e3H///XvrlrU4/H4/ycnJjB49mn79+jFkyBA2\nbdoEwL333ssTTzyxt/7o0aMZNGgQPXv25LvvvFnAd+7cyfnnn09GRgYXXHABmZmZVbZk3n77bfr0\n6cMRRxzB3XffDYDf7+eKK67YW/7UU94EsY8//jgZGRn07duXyy+/POjnrCashVMOESE+yseuPZZw\njAm1v/xvAQvXbQ/qPjPaNePPZ/eu1baLFy/mzTffJDMzE4BHH32UFi1a4Pf7Oemkk7jgggvIyMjY\nb5tt27Zx4okn8uijj3Lrrbfy6quvMnr06IP2rarMmDGDCRMmcP/99zNp0iSefvpp2rRpw/jx4/n5\n558ZMGBApfHl5ORw7733MnPmTJo3b86pp57KRx99RFpaGps3b2bevHkA5Od796Afe+wxVq1aRXR0\n9N6ycLEWTgXioiPtkpoxTVC3bt32JhuAd999lwEDBjBgwAAWLVrEwoULD9omLi6OM888E4CBAwey\ncuXKcvd93nnnHVRn2rRpXHyx9xx7v3796N278kQ5ffp0Tj75ZFJTU4mKiuLSSy/l66+/pnv37mRl\nZXHTTTcxefJkmjdvDkDv3r25/PLLGTNmTJ094FkRa+FUID7ax65if9UVjTGHpLYtkVBJSEjYu7x0\n6VKefPJJZsyYQXJyMpdffnm5z61ER0fvXfb5fPj95X93xMTEVFmntlq2bMncuXP55JNPePbZZxk/\nfjwvvvgikydP5quvvmLChAk8/PDDzJ07F5/PF9RjV5e1cCoQF+WzFo4xTdz27dtJSkqiWbNmrF+/\nnsmTJwf9GMceeyzjxo0DYN68eeW2oAINHjyYL7/8ki1btuD3+xk7diwnnngiubm5qCoXXngh999/\nP7Nnz6akpIScnBxOPvlkHnvsMTZv3kxhYWHQ30N1WQunAnHRdg/HmKZuwIABZGRk0KtXLzp16sSx\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}